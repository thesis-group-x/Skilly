generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user details
model User {
  id               Int          @id @default(autoincrement())
  uid              String       @unique
  name             String
  email            String       @unique
  address          String
  profileImage     String?
  budge            String?
  points           Int          @default(0)
  age              Int
  skills           String[]
  hobbies          String[]
  details          String?
  descriptions     String?
  phoneNumber      String?
  gender           String?
  level            Int
  createdAt        DateTime     @default(now())
  sentRequests     Friendship[] @relation("FriendshipRequests")
  receivedRequests Friendship[] @relation("FriendshipResponses")
  posts            Post[]
  comments         Comment[]
  reviews          Review[]
  memberships      Membership[] //community 
  isBanned         Boolean      @default(false) //baned user 
  isAdmin          Boolean      @default(false) //admin 
  PostM            PostM[]
  ReviewM          ReviewM[]
}

model Community {
  id          Int          @id @default(autoincrement())
  name        String
  skill       String
  memberships Membership[] // updated community
}

model Post {
  id       Int       @id @default(autoincrement())
  image    String
  title    String
  skill    String
  desc     String
  comments Comment[]
  likes    Int
  reviews  Review[]
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Review {
  id     Int  @id @default(autoincrement())
  rating Int
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Friendship {
  id           Int              @id @default(autoincrement())
  requestor    User             @relation("FriendshipRequests", fields: [requestorId], references: [id])
  requestorId  Int
  respondent   User             @relation("FriendshipResponses", fields: [respondentId], references: [id])
  respondentId Int
  status       FriendshipStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Membership {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  isAdmin     Boolean   @default(false)
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

//post market place
model PostM {
  id          Int       @id @default(autoincrement())
  title       String
  price       Float
  image       String
  description String
  reviews     ReviewM[]
  skill       String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
}

//market place
model ReviewM {
  id      Int    @id @default(autoincrement())
  comment String
  rating  Int
  postId  Int
  post    PostM  @relation(fields: [postId], references: [id])
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Country {
  id   Int    @id @default(autoincrement())
  name String

  @@map("countries")
}

//still the admin and the chat and groupe community and and groupe chat still dont know how 